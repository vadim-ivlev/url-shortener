// Description:
// Функциональность аутентификации пользователя.
// Сервис должен:
// - Выдавать пользователю симметрично подписанную куку, содержащую уникальный идентификатор пользователя,
// если такой куки не существует или она не проходит проверку подлинности.
// - Если кука не содержит `ID` пользователя, хендлер должен возвращать HTTP-статус `401 Unauthorized`.
// - При отсутствии сокращённых пользователем URL хендлер должен отдавать HTTP-статус `204 No Content`.
// Получить куки запроса можно из поля `(*http.Request).Cookie()`, а установить — методом `http.SetCookie()`.

package auth

import "net/http"

// Middleware - middleware для аутентификации пользователя
// - Выдавать пользователю симметрично подписанную куку, содержащую уникальный идентификатор пользователя,
// если такой куки не существует или она не проходит проверку подлинности.
// - Если кука не содержит `ID` пользователя, хендлер должен возвращать HTTP-статус `401 Unauthorized`.
// Получить куки запроса можно из поля `(*http.Request).Cookie()`, а установить — методом `http.SetCookie()`.
func CookieMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Получаем куки из запроса
		cookie, err := r.Cookie("ID")
		if err != nil {
			// Если куки не существует, создаем новую
			cookie = &http.Cookie{
				Name:  "ID",
				Value: "123",
			}
		}
		// Проверяем куки
		if cookie.Value != "123" {
			// Если куки не прошла проверку, возвращаем статус 401
			w.WriteHeader(http.StatusUnauthorized)
			return
		}
		// Передаем управление следующему обработчику
		next.ServeHTTP(w, r)
	})
}
